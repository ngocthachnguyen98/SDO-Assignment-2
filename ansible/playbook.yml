- name: Deploy Application
  hosts: all
  tasks: 
    - name: 1. Check if the release file of the app exists
      stat:
        path: /tmp/TechTestApp_v.0.6.0_linux64.zip
      register: release_file


    - name: 2. Download app release to EC2 instance to tmp directory
      become: yes
      get_url:
        url: "https://github.com/servian/TechTestApp/releases/download/v.0.6.0/TechTestApp_v.0.6.0_linux64.zip" # path to release file 
        dest: /tmp
        mode: '0644'
      when: not release_file.stat.exists
      register: download_result


    - name: 3. Check if the app directory exists
      stat:
        path: /etc/app
      register: app_dir
      

    - name: 4. Create app directory if it does not exist
      become: yes
      shell: "cd /etc && mkdir app"
      when: not app_dir.stat.exists


    - name: 5. Unzip the release file, if the application has not been already installed
      become: yes
      unarchive:
        src: /tmp/TechTestApp_v.0.6.0_linux64.zip
        dest: /etc/app
        remote_src: yes
      when: not app_dir.stat.exists
      register: install_result

    
    - name: 6. Include environment varibles file    
      include_vars: external_vars.yml


    - name: 7. Override environment variables for conf.toml and run TechTestApp updatedb -s
      become: yes
      shell: |
        export VTT_DBUSER={{ db_user }}
        export VTT_DBPASSWORD={{ db_pass }}
        export VTT_DBHOST={{ db_endpoint }}
        export VTT_LISTENHOST=0.0.0.0
        export VTT_LISTENPORT=80
        ./TechTestApp updatedb -s
      args:
        chdir: /etc/app/dist
      register: updatedb_result


    # Set the application as a service
    - name: 8. Install TechTestApp.service systemd unit file
      template: 
        src: TechTestApp.service.j2
        dest: /etc/systemd/system/TechTestApp.service
        owner: root
        group: root
        mode: '0600'
      become: yes


    - name: 9. Start the application, if the service is rebooted
      become: yes
      systemd:
        name: TechTestApp.service
        enabled: yes      # start the service on boot
        state: started
        daemon_reload: yes
